// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  password  String?  // Optional password field for hashed passwords
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings BookingsOnUsers[]

  @@map("users")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // Duration in minutes
  price       Float?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings BookingsOnServices[]

  @@map("services")
}

model Staff {
  id        Int      @id @default(autoincrement())
  name      String
  staffId   String   @unique // Staff ID field (user input)
  pictures  String[] // Multiple picture file paths for staff photos
  status    String   @default("active") // Status: active or inactive
  remarks   String?  // Optional remarks field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("staff")
}

model Booking {
  id          String        @id @default(cuid())
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(CONFIRMED)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  users    BookingsOnUsers[]
  services BookingsOnServices[]

  @@map("bookings")
}

model BookingsOnUsers {
  id        String   @id @default(cuid())
  bookingId String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bookingId, userId])
  @@map("bookings_on_users")
}

model BookingsOnServices {
  id        String   @id @default(cuid())
  bookingId String
  serviceId String
  createdAt DateTime @default(now())

  // Relations
  booking Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([bookingId, serviceId])
  @@map("bookings_on_services")
}

enum UserRole {
  ADMIN
  USER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
} 