generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id @default(cuid())
  email        String            @unique
  name         String
  phone        String?
  role         UserRole          @default(USER)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  password     String?
  refreshToken String?
  bookings     BookingsOnUsers[]

  @@map("users")
}

model Service {
  id          String               @id @default(cuid())
  name        String
  description String?
  duration    Int
  price       Float?
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  bookings    BookingsOnServices[]

  @@map("services")
}

model Staff {
  name      String
  staffId   String   @unique
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
  pictures  String[]
  status    String   @default("active")

  @@map("staff")
}

model Booking {
  id        String               @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  status    BookingStatus        @default(CONFIRMED)
  notes     String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  services  BookingsOnServices[]
  users     BookingsOnUsers[]

  @@map("bookings")
}

model BookingsOnUsers {
  id        String   @id @default(cuid())
  bookingId String
  userId    String
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bookingId, userId])
  @@map("bookings_on_users")
}

model BookingsOnServices {
  id        String   @id @default(cuid())
  bookingId String
  serviceId String
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([bookingId, serviceId])
  @@map("bookings_on_services")
}

enum UserRole {
  ADMIN
  USER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}
